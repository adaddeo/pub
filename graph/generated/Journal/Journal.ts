// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewIssue extends ethereum.Event {
  get params(): NewIssue__Params {
    return new NewIssue__Params(this);
  }
}

export class NewIssue__Params {
  _event: NewIssue;

  constructor(event: NewIssue) {
    this._event = event;
  }

  get publicationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get issueId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewPublication extends ethereum.Event {
  get params(): NewPublication__Params {
    return new NewPublication__Params(this);
  }
}

export class NewPublication__Params {
  _event: NewPublication;

  constructor(event: NewPublication) {
    this._event = event;
  }

  get publicationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get title(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class NewSubmission extends ethereum.Event {
  get params(): NewSubmission__Params {
    return new NewSubmission__Params(this);
  }
}

export class NewSubmission__Params {
  _event: NewSubmission;

  constructor(event: NewSubmission) {
    this._event = event;
  }

  get publicationId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get issueId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get submissionId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get content(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Journal extends ethereum.SmartContract {
  static bind(address: Address): Journal {
    return new Journal("Journal", address);
  }

  collectedSubmissionFees(_publicationId: BigInt, _issueId: BigInt): BigInt {
    let result = super.call(
      "collectedSubmissionFees",
      "collectedSubmissionFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_publicationId),
        ethereum.Value.fromUnsignedBigInt(_issueId)
      ]
    );

    return result[0].toBigInt();
  }

  try_collectedSubmissionFees(
    _publicationId: BigInt,
    _issueId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectedSubmissionFees",
      "collectedSubmissionFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_publicationId),
        ethereum.Value.fromUnsignedBigInt(_issueId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  distributedSubmissionFees(_publicationId: BigInt, _issueId: BigInt): BigInt {
    let result = super.call(
      "distributedSubmissionFees",
      "distributedSubmissionFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_publicationId),
        ethereum.Value.fromUnsignedBigInt(_issueId)
      ]
    );

    return result[0].toBigInt();
  }

  try_distributedSubmissionFees(
    _publicationId: BigInt,
    _issueId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributedSubmissionFees",
      "distributedSubmissionFees(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_publicationId),
        ethereum.Value.fromUnsignedBigInt(_issueId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  submissionFee(_publicationId: BigInt, _issueId: BigInt): BigInt {
    let result = super.call(
      "submissionFee",
      "submissionFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_publicationId),
        ethereum.Value.fromUnsignedBigInt(_issueId)
      ]
    );

    return result[0].toBigInt();
  }

  try_submissionFee(
    _publicationId: BigInt,
    _issueId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submissionFee",
      "submissionFee(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_publicationId),
        ethereum.Value.fromUnsignedBigInt(_issueId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  submissionsCount(_publicationId: BigInt, _issueId: BigInt): BigInt {
    let result = super.call(
      "submissionsCount",
      "submissionsCount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_publicationId),
        ethereum.Value.fromUnsignedBigInt(_issueId)
      ]
    );

    return result[0].toBigInt();
  }

  try_submissionsCount(
    _publicationId: BigInt,
    _issueId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submissionsCount",
      "submissionsCount(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_publicationId),
        ethereum.Value.fromUnsignedBigInt(_issueId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class CreateIssueCall extends ethereum.Call {
  get inputs(): CreateIssueCall__Inputs {
    return new CreateIssueCall__Inputs(this);
  }

  get outputs(): CreateIssueCall__Outputs {
    return new CreateIssueCall__Outputs(this);
  }
}

export class CreateIssueCall__Inputs {
  _call: CreateIssueCall;

  constructor(call: CreateIssueCall) {
    this._call = call;
  }

  get _publicationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _submissionsOpenBlock(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _submissionsCloseBlock(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _submissionFee(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateIssueCall__Outputs {
  _call: CreateIssueCall;

  constructor(call: CreateIssueCall) {
    this._call = call;
  }
}

export class CreatePublicationCall extends ethereum.Call {
  get inputs(): CreatePublicationCall__Inputs {
    return new CreatePublicationCall__Inputs(this);
  }

  get outputs(): CreatePublicationCall__Outputs {
    return new CreatePublicationCall__Outputs(this);
  }
}

export class CreatePublicationCall__Inputs {
  _call: CreatePublicationCall;

  constructor(call: CreatePublicationCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreatePublicationCall__Outputs {
  _call: CreatePublicationCall;

  constructor(call: CreatePublicationCall) {
    this._call = call;
  }
}

export class CreateSubmissionCall extends ethereum.Call {
  get inputs(): CreateSubmissionCall__Inputs {
    return new CreateSubmissionCall__Inputs(this);
  }

  get outputs(): CreateSubmissionCall__Outputs {
    return new CreateSubmissionCall__Outputs(this);
  }
}

export class CreateSubmissionCall__Inputs {
  _call: CreateSubmissionCall;

  constructor(call: CreateSubmissionCall) {
    this._call = call;
  }

  get _publicationId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _issueId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get content(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateSubmissionCall__Outputs {
  _call: CreateSubmissionCall;

  constructor(call: CreateSubmissionCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
