// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Issue extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Issue entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Issue must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Issue", id.toString(), this);
    }
  }

  static load(id: string): Issue | null {
    return changetype<Issue | null>(store.get("Issue", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): BigInt {
    let value = this.get("contractId");
    return value!.toBigInt();
  }

  set contractId(value: BigInt) {
    this.set("contractId", Value.fromBigInt(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }

  get publication(): string {
    let value = this.get("publication");
    return value!.toString();
  }

  set publication(value: string) {
    this.set("publication", Value.fromString(value));
  }

  get submissions(): Array<string> {
    let value = this.get("submissions");
    return value!.toStringArray();
  }

  set submissions(value: Array<string>) {
    this.set("submissions", Value.fromStringArray(value));
  }
}

export class Publication extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Publication entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Publication must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Publication", id.toString(), this);
    }
  }

  static load(id: string): Publication | null {
    return changetype<Publication | null>(store.get("Publication", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): BigInt {
    let value = this.get("contractId");
    return value!.toBigInt();
  }

  set contractId(value: BigInt) {
    this.set("contractId", Value.fromBigInt(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get issuesCount(): BigInt {
    let value = this.get("issuesCount");
    return value!.toBigInt();
  }

  set issuesCount(value: BigInt) {
    this.set("issuesCount", Value.fromBigInt(value));
  }

  get issues(): Array<string> {
    let value = this.get("issues");
    return value!.toStringArray();
  }

  set issues(value: Array<string>) {
    this.set("issues", Value.fromStringArray(value));
  }

  get submissions(): Array<string> {
    let value = this.get("submissions");
    return value!.toStringArray();
  }

  set submissions(value: Array<string>) {
    this.set("submissions", Value.fromStringArray(value));
  }
}

export class Submission extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Submission entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Submission must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Submission", id.toString(), this);
    }
  }

  static load(id: string): Submission | null {
    return changetype<Submission | null>(store.get("Submission", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): BigInt {
    let value = this.get("contractId");
    return value!.toBigInt();
  }

  set contractId(value: BigInt) {
    this.set("contractId", Value.fromBigInt(value));
  }

  get submitter(): Bytes {
    let value = this.get("submitter");
    return value!.toBytes();
  }

  set submitter(value: Bytes) {
    this.set("submitter", Value.fromBytes(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get body(): string {
    let value = this.get("body");
    return value!.toString();
  }

  set body(value: string) {
    this.set("body", Value.fromString(value));
  }

  get issue(): string {
    let value = this.get("issue");
    return value!.toString();
  }

  set issue(value: string) {
    this.set("issue", Value.fromString(value));
  }

  get publication(): string {
    let value = this.get("publication");
    return value!.toString();
  }

  set publication(value: string) {
    this.set("publication", Value.fromString(value));
  }
}
